#!/usr/bin/python
# resync
# Created Fri Jan 15 15:35:35 AKST 2016
# Copyright (C) 2016 by Raymond E. Marcil <marcilr@gmail.com>
#

import os.path

# Used by sys.exit() to exit with error.
import sys

# -------------------------------------------
# Configuration
# -------------------------------------------
DEBUG = "true";
#DEBUG = "false";


#
# List of manifests to check for configuration
# and manifests to clone sync.
#
manifests = ['/home/marcilr/.manifest','manifest' ]


# -------------------------------------------
# Commands
# -------------------------------------------
git = "/usr/bin/git"


# -------------------------------------------
# Functions
# -------------------------------------------

#
# debug()
# str - String to print for DEBUG == 'true'
#
def debug( str ):
  if DEBUG == 'true':
      print str
  return

# error()
# str - String with error message to print
#
def error( str ):
   sys.exit(str)
   return

#
# loop_over_manifest()
# manifest - Path to manifest files to process
# username - Global variable set with username if found
# password - global variable set with password if found
#
def loop_over_manifest(manifest_file):
    global manifest
    global username
    global password

    debug("loop_over_manifest() Looping...")

    for line in open(manifest_file, 'r'):
        # Remove end whitespace
        line = line.rstrip()

        # Check if line (not blank) and not comment
        if line and not line.startswith('#'):

            debug("loop_over_manifest() line: %s" % line)

            # Split line to list
            manifest_list = line.split()
            debug("loop_over_manifest() split line:")

            src = manifest_list[0]
            tar = manifest_list[1]

            # Record username id found
            if src == "username":
                debug("loop_over_manifest() %s = %s " % (src, tar))
                username = src

            elif manifest_list[0] == "password":
                debug("loop_over_manifest() %s = *** " % src)
                password = tar

            else:
                new = [src,tar]
                manifest.append(new)
           
        else:
            debug("loop_over_manifest() skipping blank line or comment")

        if not line: continue
 
    #debug("loop_over_manifest() closing: %s" % file)
    #file.close
    #debug("loop_over_manifest() close: %s" % file)

    return manifest


#
# get_manifest()
# Get manifest from the manifests list of manifests.
#
def get_manifest():
    debug( "get_manifest() processing: "
        + str(len(manifests)) + ' manifests')

    for idx, file in enumerate(manifests):
        if os.path.isfile(file):
            message = "get_manifest() %d, %s" % (idx, file)
            debug(message)
            loop_over_manifest(file)
        else:
            message = "get_manifest() No %s found, aborting." % file
            error(message)
     
    return


# -------------------------------------------
# Main
# -------------------------------------------
manifest = []
username = ""
password = ""

get_manifest()

# Report username from manifest
if username != '': 
    debug("main() username = %s" % username)

# Report password from manifest
if password != '':
    debug("main() password = ***")
